// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // SaaS specific fields
  stripeCustomerId String?
  subscriptionId   String?
  subscriptionStatus String? // active, canceled, past_due, etc.
  planId           String?
  usageCount       Int       @default(0)
  lastLoginAt      DateTime?
  
  // Organization/Team support
  organizationId   String?
  organization     Organization? @relation(fields: [organizationId], references: [id])
  role             String? // owner, admin, member
  
  // User preferences
  preferences      Json?
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Organization settings
  settings    Json?
  
  // Relationships
  users       User[]
  projects    Project[]
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Project settings
  settings       Json?
  
  // Usage tracking
  usageCount     Int      @default(0)
  lastUsedAt     DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  stripePriceId        String
  stripeCurrentPeriodEnd DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Subscription details
  status               String
  planId               String
  quantity             Int      @default(1)
  
  // Usage tracking
  usageCount           Int      @default(0)
  usageLimit           Int?
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id])
}

model Webhook {
  id        String   @id @default(cuid())
  url       String
  events    String[] // Array of event types
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Webhook delivery tracking
  lastDeliveryAt DateTime?
  deliveryCount  Int      @default(0)
  failureCount   Int      @default(0)
}
